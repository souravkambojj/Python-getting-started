{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import sys\n",
    "import shutil\n",
    "import os\n",
    "import time\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import multiprocessing as mp\n",
    "import face_recognition\n",
    "from cvloop import cvloop\n",
    "import zipfile\n",
    "\n",
    "from keras.models import load_model\n",
    "from keras.preprocessing.image import load_img,img_to_array,ImageDataGenerator\n",
    "from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,Dropout\n",
    "from keras.models import Sequential\n",
    "from sklearn.metrics import classification_report,confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with zipfile.ZipFile('/home/ubuntu/videos/ck_database.zip', 'r') as zip_ref:\n",
    "    zip_ref.extractall('/home/ubuntu/videos/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_gen=ImageDataGenerator(rescale=1./255,\n",
    "                                  rotation_range=40,\n",
    "                                  width_shift_range=0.2 ,\n",
    "                                  height_shift_range=0.2,\n",
    "                                  shear_range=0.2, \n",
    "                                  zoom_range=0.2,\n",
    "                                  horizontal_flip=True,\n",
    "                                  fill_mode='nearest')\n",
    "\n",
    "val_data_gen=ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dir='/home/ubuntu/videos/ck_dataset/training/'\n",
    "val_dir='/home/ubuntu/videos/ck_dataset/testing/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1065 images belonging to 7 classes.\n",
      "Found 118 images belonging to 7 classes.\n"
     ]
    }
   ],
   "source": [
    "train_gen=train_data_gen.flow_from_directory(train_dir,target_size=(150,150),batch_size=64,class_mode='categorical')\n",
    "val_gen=val_data_gen.flow_from_directory(val_dir,target_size=(150,150),batch_size=64,class_mode='categorical')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Logging before flag parsing goes to stderr.\n",
      "W0731 06:19:25.299946 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "W0731 06:19:25.316340 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n",
      "W0731 06:19:25.319229 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n",
      "W0731 06:19:25.336433 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv2D(64, (3, 3), activation='relu',\n",
    "                        input_shape=(150,150, 3)))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(7, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0731 06:19:48.602098 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n",
      "W0731 06:19:48.622143 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer='adadelta',loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0731 06:19:57.733152 140291519358720 deprecation.py:323] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
      "W0731 06:19:57.888740 140291519358720 deprecation_wrapper.py:119] From /home/ubuntu/anaconda3/envs/video_env/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n",
      "100/100 [==============================] - 99s 992ms/step - loss: 1.9523 - acc: 0.2277 - val_loss: 1.9684 - val_acc: 0.1186\n",
      "Epoch 2/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 1.8162 - acc: 0.2573 - val_loss: 2.0572 - val_acc: 0.1695\n",
      "Epoch 3/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 1.7954 - acc: 0.2586 - val_loss: 1.9226 - val_acc: 0.1780\n",
      "Epoch 4/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 1.7561 - acc: 0.2790 - val_loss: 2.0111 - val_acc: 0.1441\n",
      "Epoch 5/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 1.7308 - acc: 0.2922 - val_loss: 2.1064 - val_acc: 0.1864\n",
      "Epoch 6/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 1.7129 - acc: 0.2993 - val_loss: 2.0491 - val_acc: 0.2542\n",
      "Epoch 7/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.6980 - acc: 0.3136 - val_loss: 2.1028 - val_acc: 0.3051\n",
      "Epoch 8/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 1.6766 - acc: 0.3267 - val_loss: 2.1044 - val_acc: 0.2797\n",
      "Epoch 9/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 1.6391 - acc: 0.3419 - val_loss: 1.9303 - val_acc: 0.3051\n",
      "Epoch 10/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 1.5881 - acc: 0.3714 - val_loss: 2.0796 - val_acc: 0.2881\n",
      "Epoch 11/150\n",
      "100/100 [==============================] - 97s 965ms/step - loss: 1.5375 - acc: 0.3969 - val_loss: 2.0582 - val_acc: 0.2627\n",
      "Epoch 12/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 1.4646 - acc: 0.4267 - val_loss: 1.8338 - val_acc: 0.3898\n",
      "Epoch 13/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 1.4169 - acc: 0.4431 - val_loss: 1.9445 - val_acc: 0.4322\n",
      "Epoch 14/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 1.3872 - acc: 0.4537 - val_loss: 2.1487 - val_acc: 0.4237\n",
      "Epoch 15/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.3460 - acc: 0.4697 - val_loss: 1.9339 - val_acc: 0.4322\n",
      "Epoch 16/150\n",
      "100/100 [==============================] - 97s 965ms/step - loss: 1.3042 - acc: 0.4898 - val_loss: 1.9459 - val_acc: 0.4153\n",
      "Epoch 17/150\n",
      "100/100 [==============================] - 97s 967ms/step - loss: 1.2610 - acc: 0.5039 - val_loss: 2.1354 - val_acc: 0.3898\n",
      "Epoch 18/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 1.2442 - acc: 0.5186 - val_loss: 1.7989 - val_acc: 0.3898\n",
      "Epoch 19/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.2042 - acc: 0.5341 - val_loss: 1.9661 - val_acc: 0.5254\n",
      "Epoch 20/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 1.1899 - acc: 0.5386 - val_loss: 2.0779 - val_acc: 0.4746\n",
      "Epoch 21/150\n",
      "100/100 [==============================] - 97s 967ms/step - loss: 1.1677 - acc: 0.5472 - val_loss: 1.8244 - val_acc: 0.4492\n",
      "Epoch 22/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.1340 - acc: 0.5589 - val_loss: 2.3160 - val_acc: 0.4661\n",
      "Epoch 23/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.1184 - acc: 0.5660 - val_loss: 1.9093 - val_acc: 0.5000\n",
      "Epoch 24/150\n",
      "100/100 [==============================] - 101s 1s/step - loss: 1.0781 - acc: 0.5807 - val_loss: 2.2394 - val_acc: 0.4153\n",
      "Epoch 25/150\n",
      "100/100 [==============================] - 99s 988ms/step - loss: 1.0492 - acc: 0.5987 - val_loss: 2.1652 - val_acc: 0.4153\n",
      "Epoch 26/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 1.0375 - acc: 0.5943 - val_loss: 2.3040 - val_acc: 0.4237\n",
      "Epoch 27/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 1.0039 - acc: 0.6192 - val_loss: 2.0669 - val_acc: 0.4831\n",
      "Epoch 28/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.9824 - acc: 0.6199 - val_loss: 1.6460 - val_acc: 0.5508\n",
      "Epoch 29/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.9786 - acc: 0.6259 - val_loss: 2.0742 - val_acc: 0.5085\n",
      "Epoch 30/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.9508 - acc: 0.6308 - val_loss: 1.9046 - val_acc: 0.5424\n",
      "Epoch 31/150\n",
      "100/100 [==============================] - 96s 965ms/step - loss: 0.9230 - acc: 0.6431 - val_loss: 1.8441 - val_acc: 0.5085\n",
      "Epoch 32/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.9339 - acc: 0.6435 - val_loss: 2.2203 - val_acc: 0.5085\n",
      "Epoch 33/150\n",
      "100/100 [==============================] - 97s 968ms/step - loss: 0.8917 - acc: 0.6576 - val_loss: 2.4071 - val_acc: 0.4661\n",
      "Epoch 34/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.8644 - acc: 0.6658 - val_loss: 2.0244 - val_acc: 0.5593\n",
      "Epoch 35/150\n",
      "100/100 [==============================] - 97s 968ms/step - loss: 0.8539 - acc: 0.6753 - val_loss: 2.3208 - val_acc: 0.5593\n",
      "Epoch 36/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.8258 - acc: 0.6893 - val_loss: 2.0788 - val_acc: 0.5424\n",
      "Epoch 37/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 0.8253 - acc: 0.6889 - val_loss: 1.8028 - val_acc: 0.5678\n",
      "Epoch 38/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.7996 - acc: 0.6969 - val_loss: 2.1198 - val_acc: 0.4831\n",
      "Epoch 39/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 0.7856 - acc: 0.7005 - val_loss: 1.6987 - val_acc: 0.6017\n",
      "Epoch 40/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.7533 - acc: 0.7150 - val_loss: 1.9328 - val_acc: 0.6186\n",
      "Epoch 41/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.7522 - acc: 0.7165 - val_loss: 1.6485 - val_acc: 0.5085\n",
      "Epoch 42/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.7363 - acc: 0.7192 - val_loss: 2.2857 - val_acc: 0.5763\n",
      "Epoch 43/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 0.7152 - acc: 0.7230 - val_loss: 1.9879 - val_acc: 0.6441\n",
      "Epoch 44/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.7063 - acc: 0.7282 - val_loss: 2.1588 - val_acc: 0.6017\n",
      "Epoch 45/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.6766 - acc: 0.7445 - val_loss: 1.9649 - val_acc: 0.6525\n",
      "Epoch 46/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.6652 - acc: 0.7481 - val_loss: 1.7619 - val_acc: 0.6356\n",
      "Epoch 47/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.6642 - acc: 0.7512 - val_loss: 1.7683 - val_acc: 0.6780\n",
      "Epoch 48/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.6547 - acc: 0.7493 - val_loss: 1.5664 - val_acc: 0.6102\n",
      "Epoch 49/150\n",
      "100/100 [==============================] - 96s 965ms/step - loss: 0.6318 - acc: 0.7689 - val_loss: 1.8577 - val_acc: 0.6610\n",
      "Epoch 50/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.6217 - acc: 0.7683 - val_loss: 2.1289 - val_acc: 0.6356\n",
      "Epoch 51/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.6187 - acc: 0.7724 - val_loss: 1.7620 - val_acc: 0.6864\n",
      "Epoch 52/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.5923 - acc: 0.7778 - val_loss: 2.0221 - val_acc: 0.6102\n",
      "Epoch 53/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.5799 - acc: 0.7830 - val_loss: 1.6278 - val_acc: 0.6610\n",
      "Epoch 54/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.5653 - acc: 0.7901 - val_loss: 2.3420 - val_acc: 0.6356\n",
      "Epoch 55/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.5785 - acc: 0.7865 - val_loss: 1.8456 - val_acc: 0.6780\n",
      "Epoch 56/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.5465 - acc: 0.7982 - val_loss: 1.8755 - val_acc: 0.7119\n",
      "Epoch 57/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.5366 - acc: 0.8038 - val_loss: 1.6902 - val_acc: 0.6695\n",
      "Epoch 58/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.5275 - acc: 0.8013 - val_loss: 1.7988 - val_acc: 0.6610\n",
      "Epoch 59/150\n",
      "100/100 [==============================] - 97s 968ms/step - loss: 0.5011 - acc: 0.8161 - val_loss: 1.2128 - val_acc: 0.6610\n",
      "Epoch 60/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.5109 - acc: 0.8141 - val_loss: 1.7642 - val_acc: 0.6610\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 61/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.4785 - acc: 0.8248 - val_loss: 1.7446 - val_acc: 0.7034\n",
      "Epoch 62/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.5031 - acc: 0.8099 - val_loss: 1.8312 - val_acc: 0.7373\n",
      "Epoch 63/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 0.5017 - acc: 0.8133 - val_loss: 1.7243 - val_acc: 0.6949\n",
      "Epoch 64/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.4531 - acc: 0.8292 - val_loss: 1.6736 - val_acc: 0.6949\n",
      "Epoch 65/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.4899 - acc: 0.8156 - val_loss: 2.0955 - val_acc: 0.6695\n",
      "Epoch 66/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.4360 - acc: 0.8355 - val_loss: 1.4793 - val_acc: 0.7119\n",
      "Epoch 67/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.4783 - acc: 0.8233 - val_loss: 1.4349 - val_acc: 0.7288\n",
      "Epoch 68/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.4331 - acc: 0.8424 - val_loss: 1.5215 - val_acc: 0.7203\n",
      "Epoch 69/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.4334 - acc: 0.8407 - val_loss: 1.9156 - val_acc: 0.6864\n",
      "Epoch 70/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.4262 - acc: 0.8386 - val_loss: 1.7382 - val_acc: 0.7203\n",
      "Epoch 71/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.4080 - acc: 0.8503 - val_loss: 1.6188 - val_acc: 0.6949\n",
      "Epoch 74/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3927 - acc: 0.8571 - val_loss: 1.5353 - val_acc: 0.7034\n",
      "Epoch 75/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.3803 - acc: 0.8590 - val_loss: 1.5141 - val_acc: 0.7034\n",
      "Epoch 76/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.3777 - acc: 0.8614 - val_loss: 1.8991 - val_acc: 0.7458\n",
      "Epoch 77/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3900 - acc: 0.8596 - val_loss: 1.6182 - val_acc: 0.6949\n",
      "Epoch 78/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3753 - acc: 0.8623 - val_loss: 1.6327 - val_acc: 0.7203\n",
      "Epoch 79/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.3771 - acc: 0.8653 - val_loss: 2.2551 - val_acc: 0.6610\n",
      "Epoch 80/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.3588 - acc: 0.8685 - val_loss: 1.9865 - val_acc: 0.6610\n",
      "Epoch 81/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.3765 - acc: 0.8645 - val_loss: 2.0558 - val_acc: 0.7034\n",
      "Epoch 82/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3365 - acc: 0.8762 - val_loss: 1.5316 - val_acc: 0.7034\n",
      "Epoch 83/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.3488 - acc: 0.8710 - val_loss: 1.5907 - val_acc: 0.6780\n",
      "Epoch 84/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.3639 - acc: 0.8678 - val_loss: 1.8134 - val_acc: 0.6610\n",
      "Epoch 85/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.3324 - acc: 0.8763 - val_loss: 1.6527 - val_acc: 0.7542\n",
      "Epoch 86/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.3209 - acc: 0.8851 - val_loss: 1.5208 - val_acc: 0.7458\n",
      "Epoch 87/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.3270 - acc: 0.8869 - val_loss: 1.4645 - val_acc: 0.7119\n",
      "Epoch 88/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.3241 - acc: 0.8820 - val_loss: 1.5360 - val_acc: 0.7288\n",
      "Epoch 89/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.3315 - acc: 0.8784 - val_loss: 1.7353 - val_acc: 0.6949\n",
      "Epoch 90/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.2930 - acc: 0.8910 - val_loss: 1.6280 - val_acc: 0.7627\n",
      "Epoch 91/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3236 - acc: 0.8799 - val_loss: 1.7104 - val_acc: 0.7034\n",
      "Epoch 92/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.2909 - acc: 0.8950 - val_loss: 1.4638 - val_acc: 0.7458\n",
      "Epoch 93/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.3205 - acc: 0.8836 - val_loss: 1.7317 - val_acc: 0.7119\n",
      "Epoch 94/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.3195 - acc: 0.8799 - val_loss: 1.6036 - val_acc: 0.7373\n",
      "Epoch 95/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2908 - acc: 0.8921 - val_loss: 1.8936 - val_acc: 0.6780\n",
      "Epoch 96/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.2972 - acc: 0.8936 - val_loss: 1.6730 - val_acc: 0.7373\n",
      "Epoch 97/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2967 - acc: 0.8880 - val_loss: 1.6367 - val_acc: 0.7119\n",
      "Epoch 98/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.2756 - acc: 0.9006 - val_loss: 1.5842 - val_acc: 0.7458\n",
      "Epoch 99/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2850 - acc: 0.8964 - val_loss: 1.5447 - val_acc: 0.7288\n",
      "Epoch 100/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2830 - acc: 0.8957 - val_loss: 1.5414 - val_acc: 0.7034\n",
      "Epoch 101/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2668 - acc: 0.9081 - val_loss: 2.0341 - val_acc: 0.6949\n",
      "Epoch 102/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2703 - acc: 0.9032 - val_loss: 1.8517 - val_acc: 0.7034\n",
      "Epoch 103/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.2681 - acc: 0.9036 - val_loss: 1.6480 - val_acc: 0.7458\n",
      "Epoch 104/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2838 - acc: 0.8992 - val_loss: 1.5271 - val_acc: 0.7288\n",
      "Epoch 105/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2670 - acc: 0.9016 - val_loss: 1.3137 - val_acc: 0.7797\n",
      "Epoch 106/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.2732 - acc: 0.9064 - val_loss: 1.8645 - val_acc: 0.7542\n",
      "Epoch 107/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2350 - acc: 0.9128 - val_loss: 1.6509 - val_acc: 0.7119\n",
      "Epoch 108/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.2455 - acc: 0.9090 - val_loss: 1.7635 - val_acc: 0.7542\n",
      "Epoch 109/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.2545 - acc: 0.9085 - val_loss: 1.5435 - val_acc: 0.7373\n",
      "Epoch 110/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.2483 - acc: 0.9122 - val_loss: 1.5659 - val_acc: 0.7458\n",
      "Epoch 111/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2368 - acc: 0.9143 - val_loss: 1.6566 - val_acc: 0.7458\n",
      "Epoch 112/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2312 - acc: 0.9152 - val_loss: 1.8401 - val_acc: 0.7881\n",
      "Epoch 113/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.2399 - acc: 0.9172 - val_loss: 2.0615 - val_acc: 0.7203\n",
      "Epoch 114/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.2390 - acc: 0.9168 - val_loss: 1.8566 - val_acc: 0.7627\n",
      "Epoch 115/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2357 - acc: 0.9173 - val_loss: 1.5375 - val_acc: 0.7797\n",
      "Epoch 116/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2267 - acc: 0.9201 - val_loss: 1.5996 - val_acc: 0.7373\n",
      "Epoch 117/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2280 - acc: 0.9192 - val_loss: 1.4096 - val_acc: 0.7966\n",
      "Epoch 118/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.2396 - acc: 0.9158 - val_loss: 1.6483 - val_acc: 0.6780\n",
      "Epoch 119/150\n",
      "100/100 [==============================] - 96s 956ms/step - loss: 0.2311 - acc: 0.9173 - val_loss: 1.7615 - val_acc: 0.7458\n",
      "Epoch 120/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.2226 - acc: 0.9198 - val_loss: 1.5637 - val_acc: 0.7797\n",
      "Epoch 121/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2578 - acc: 0.9053 - val_loss: 0.9672 - val_acc: 0.7373\n",
      "Epoch 122/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.2146 - acc: 0.9261 - val_loss: 1.6777 - val_acc: 0.7458\n",
      "Epoch 123/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.2144 - acc: 0.9237 - val_loss: 2.0048 - val_acc: 0.7627\n",
      "Epoch 124/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2179 - acc: 0.9223 - val_loss: 1.8484 - val_acc: 0.7542\n",
      "Epoch 125/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.2108 - acc: 0.9247 - val_loss: 1.5177 - val_acc: 0.8136\n",
      "Epoch 126/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.2116 - acc: 0.9239 - val_loss: 1.7526 - val_acc: 0.7712\n",
      "Epoch 127/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2030 - acc: 0.9279 - val_loss: 1.5057 - val_acc: 0.7797\n",
      "Epoch 128/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.2075 - acc: 0.9235 - val_loss: 1.5844 - val_acc: 0.7881\n",
      "Epoch 129/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.2203 - acc: 0.9252 - val_loss: 1.6497 - val_acc: 0.7542\n",
      "Epoch 130/150\n",
      "100/100 [==============================] - 96s 963ms/step - loss: 0.1913 - acc: 0.9323 - val_loss: 2.1118 - val_acc: 0.7712\n",
      "Epoch 131/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.1918 - acc: 0.9303 - val_loss: 1.5142 - val_acc: 0.7966\n",
      "Epoch 132/150\n",
      "100/100 [==============================] - 96s 958ms/step - loss: 0.2112 - acc: 0.9257 - val_loss: 1.5320 - val_acc: 0.7627\n",
      "Epoch 133/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.1836 - acc: 0.9333 - val_loss: 1.5076 - val_acc: 0.7458\n",
      "Epoch 134/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.1863 - acc: 0.9334 - val_loss: 2.0391 - val_acc: 0.7881\n",
      "Epoch 135/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.1951 - acc: 0.9283 - val_loss: 2.3723 - val_acc: 0.7288\n",
      "Epoch 136/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.1756 - acc: 0.9348 - val_loss: 1.6755 - val_acc: 0.7712\n",
      "Epoch 137/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.2021 - acc: 0.9301 - val_loss: 1.4377 - val_acc: 0.7712\n",
      "Epoch 138/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.1984 - acc: 0.9277 - val_loss: 1.6533 - val_acc: 0.7712\n",
      "Epoch 139/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.2082 - acc: 0.9241 - val_loss: 2.1061 - val_acc: 0.7373\n",
      "Epoch 140/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.1847 - acc: 0.9347 - val_loss: 1.5646 - val_acc: 0.7966\n",
      "Epoch 141/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.1814 - acc: 0.9370 - val_loss: 2.1588 - val_acc: 0.7627\n",
      "Epoch 142/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.1914 - acc: 0.9298 - val_loss: 1.7041 - val_acc: 0.7712\n",
      "Epoch 143/150\n",
      "100/100 [==============================] - 96s 964ms/step - loss: 0.1710 - acc: 0.9411 - val_loss: 1.8359 - val_acc: 0.7542\n",
      "Epoch 144/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.1807 - acc: 0.9355 - val_loss: 1.7717 - val_acc: 0.7881\n",
      "Epoch 145/150\n",
      "100/100 [==============================] - 97s 966ms/step - loss: 0.1938 - acc: 0.9316 - val_loss: 2.1157 - val_acc: 0.7373\n",
      "Epoch 146/150\n",
      "100/100 [==============================] - 96s 961ms/step - loss: 0.1709 - acc: 0.9373 - val_loss: 1.9371 - val_acc: 0.7458\n",
      "Epoch 147/150\n",
      "100/100 [==============================] - 96s 960ms/step - loss: 0.1684 - acc: 0.9372 - val_loss: 1.5738 - val_acc: 0.7881\n",
      "Epoch 148/150\n",
      "100/100 [==============================] - 96s 957ms/step - loss: 0.1892 - acc: 0.9341 - val_loss: 1.9135 - val_acc: 0.7542\n",
      "Epoch 149/150\n",
      "100/100 [==============================] - 96s 962ms/step - loss: 0.1666 - acc: 0.9393 - val_loss: 1.7220 - val_acc: 0.7288\n",
      "Epoch 150/150\n",
      "100/100 [==============================] - 96s 959ms/step - loss: 0.1769 - acc: 0.9378 - val_loss: 1.8127 - val_acc: 0.7288\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_gen,steps_per_epoch=100,epochs=150,validation_data=val_gen,validation_steps=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_1 (Conv2D)            (None, 148, 148, 64)      1792      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 74, 74, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 72, 72, 64)        36928     \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 36, 36, 64)        0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 82944)             0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 128)               10616960  \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 7)                 455       \n",
      "=================================================================\n",
      "Total params: 10,664,391\n",
      "Trainable params: 10,664,391\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_loss=history.history['loss']\n",
    "train_acc=history.history['acc']\n",
    "val_loss=history.history['val_loss']\n",
    "val_acc=history.history['val_acc']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "epochs=range(1,len(train_loss)+1)\n",
    "plt.plot(epochs,train_acc,'-',color='blue')\n",
    "plt.plot(epochs,val_acc,':',color='green')\n",
    "plt.legend(['Training_acc','validation_acc'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('emotion_detection_with_conv_model1.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data_gen=ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_dir='/home/ubuntu/videos/ck_dataset/testing/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 118 images belonging to 7 classes.\n"
     ]
    }
   ],
   "source": [
    "# Make sure you use ***** shuffle=False ***** in your test generator\n",
    "# and reset it using validation_generator.reset() before you make your predictions.\n",
    "test_gen=test_data_gen.flow_from_directory(test_dir,target_size=(150,150),batch_size=64,class_mode='categorical',shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_gen.reset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4,\n",
       "       4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n",
       "       5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n",
       "       6, 6, 6, 6, 6, 6, 6, 6], dtype=int32)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actual_labels=test_gen.classes\n",
    "actual_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb_samples = len(test_gen.filenames) \n",
    "nb_samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds=model.predict_generator(test_gen,steps=nb_samples/64)  #steps=total_sample/batch_size\n",
    "len(preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0, 0, 1, 1, 1, 0, 0, 6, 6, 0, 0, 0, 0, 2, 2, 2, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 6, 6, 6, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 4, 0, 0, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 5, 2, 2, 5, 5]\n"
     ]
    }
   ],
   "source": [
    "pred_labels=[pred.argmax() for pred in preds] \n",
    "print(pred_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "classification report: \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.53      0.62        17\n",
      "           1       0.79      0.79      0.79        14\n",
      "           2       0.38      0.30      0.33        10\n",
      "           3       0.79      0.90      0.84        21\n",
      "           4       1.00      0.33      0.50         9\n",
      "           5       0.88      1.00      0.94        22\n",
      "           6       0.59      0.76      0.67        25\n",
      "\n",
      "    accuracy                           0.73       118\n",
      "   macro avg       0.74      0.66      0.67       118\n",
      "weighted avg       0.74      0.73      0.72       118\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"classification report: \")\n",
    "print(classification_report(actual_labels,pred_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "confusion matrix: \n",
      "[[ 9  3  3  0  0  0  2]\n",
      " [ 0 11  0  1  0  0  2]\n",
      " [ 0  0  3  4  0  0  3]\n",
      " [ 0  0  0 19  0  0  2]\n",
      " [ 2  0  0  0  3  0  4]\n",
      " [ 0  0  0  0  0 22  0]\n",
      " [ 1  0  2  0  0  3 19]]\n"
     ]
    }
   ],
   "source": [
    "print(\"confusion matrix: \")\n",
    "print(confusion_matrix(actual_labels,pred_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "video_env",
   "language": "python",
   "name": "video_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
